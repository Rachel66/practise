class BinaryTree:
    
    def __init__(self,value):
        self.left=None
        self.data=value
        self.right=None

    def insertLeft(self,value):
        self.left=BinaryTree(value)
        return self.left

    def insertRight(self,value):
        self.right=BinaryTree(value)
        return self.right

    def showdata(self):
        print (self.data)
        

def insert(node,value):

    if value > node.data:
        if node.right:
            insert(node.right,value)
        else:
            node.insertRight(value)
    else:
        if node.left:
            insert(node.left,value)
        else:
            node.insertLeft(value)

def preorder(node):
    
    if node.data:
        node.showdata()
        if node.left:
            preorder(node.left)
        if node.right:
            preorder(node.right)

def inorder(node):
    
    if node.data:
        if node.left:
            inorder(node.left)
        node.showdata()
        if node.right:
            inorder(node.right)

def postorder(node):
    
    if node.data:
        if node.left:
             postorder(node.left)
        if node.right:
            postorder(node.right)
        node.showdata()



if __name__ == "__main__":

    list=[65,4,71,33,18,9,56,7,123,99]
    print("list: ",list)
    Root=BinaryTree(list[0])
    node=Root
    for i in range(1,len(list)):
        insert(Root,list[i])

    print ("preorder: ")
    preorder(Root)
    print ("inorder: ")
    inorder(Root)
    print ("postorder: ")
    postorder(Root)
    
    
